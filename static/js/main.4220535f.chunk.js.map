{"version":3,"sources":["utils/fetchClient.ts","types/MainContentType.ts","types/PostCommentsType.ts","components/Users/UserContext.tsx","api/data.ts","components/Posts/PostContext.tsx","components/Comments/CommentContext.tsx","components/Users/UserSelector.tsx","components/Loader/Loader.tsx","components/Posts/PostsList.tsx","components/Comments/NewCommentForm.tsx","components/Comments/CommentItem.tsx","components/Comments/CommentsList.tsx","components/Posts/PostDetails.tsx","components/PostsApp.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","MainContentType","client","PostCommentsType","UsersContext","React","createContext","users","setUsers","mainContent","NoSelectedUser","setMainContent","selectedUser","setSelectedUser","UsersProvider","children","useState","useEffect","catch","PostsLoadingError","value","useMemo","Provider","PostsContext","posts","setPosts","selectedPost","setSelectedPost","details","None","setDetails","formIsVisible","setFormIsVisible","PostsProvider","useContext","userId","Loader","id","currentPosts","length","NoPostsYet","PostsList","CommentsContext","comments","setComments","formIsLoading","setFormIsLoading","CommentsProvider","postId","IsLoading","currentComments","CommentsError","NoCommentsMessage","CommentsList","UserSelector","activeDropdown","setActiveDropdown","dropdownRef","useRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","className","classNames","type","onClick","name","role","ref","map","user","href","post","title","item","NewCommentForm","setName","email","setEmail","setBody","nameError","setNameError","emailError","setEmailError","bodyError","setBodyError","onSubmit","preventDefault","currentName","trim","currentEmail","currentBody","addComments","newComment","finally","htmlFor","placeholder","onChange","CommentItem","handleDeleteComment","filter","el","comment","PostDetails","PostsApp","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4220535f.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum MainContentType {\n  NoSelectedUser,\n  Loader,\n  PostsLoadingError,\n  NoPostsYet,\n  PostsList,\n}\n","export enum PostCommentsType {\n  None,\n  IsLoading,\n  CommentsError,\n  NoCommentsMessage,\n  CommentsList,\n}\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { getUsers } from '../../api/data';\nimport { User } from '../../types/User';\nimport { MainContentType } from '../../types/MainContentType';\n\nexport interface UsersContextType {\n  users: User[],\n  setUsers: React.Dispatch<React.SetStateAction<User[]>>,\n  mainContent: MainContentType,\n  setMainContent: (context: MainContentType) => void,\n  selectedUser: User | null,\n  setSelectedUser: (selectedUser: User | null) => void,\n}\n\nexport const UsersContext = React.createContext<UsersContextType>({\n  users: [],\n  setUsers: () => { },\n  mainContent: MainContentType.NoSelectedUser,\n  setMainContent: () => {},\n  selectedUser: null,\n  setSelectedUser: () => { },\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const UsersProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [mainContent, setMainContent]\n    = useState<MainContentType>(MainContentType.NoSelectedUser);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => setMainContent(MainContentType.PostsLoadingError));\n  }, []);\n\n  const value = useMemo(() => ({\n    users,\n    setUsers,\n    mainContent,\n    setMainContent,\n    selectedUser,\n    setSelectedUser,\n  }), [users, mainContent, selectedUser]);\n\n  return (\n    <UsersContext.Provider value={value}>\n      {children}\n    </UsersContext.Provider>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComments = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComments = ({\n  postId, name, email, body,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n};\n","import React, {\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nimport * as data from '../../api/data';\nimport { Post } from '../../types/Post';\nimport { MainContentType } from '../../types/MainContentType';\nimport { PostCommentsType } from '../../types/PostCommentsType';\nimport { UsersContext } from '../Users/UserContext';\n\nexport interface PostsContextType {\n  posts: Post[],\n  setPosts: React.Dispatch<React.SetStateAction<Post[]>>,\n  selectedPost: Post | null,\n  setSelectedPost: (selectedPost: Post | null) => void,\n  details: PostCommentsType,\n  setDetails: (context: PostCommentsType) => void,\n  formIsVisible: boolean,\n  setFormIsVisible: React.Dispatch<React.SetStateAction<boolean>>,\n}\n\nexport const PostsContext = React.createContext<PostsContextType>({\n  posts: [],\n  setPosts: () => { },\n  selectedPost: null,\n  setSelectedPost: () => { },\n  details: PostCommentsType.None,\n  setDetails: () => { },\n  formIsVisible: false,\n  setFormIsVisible: () => { },\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PostsProvider: React.FC<Props> = ({ children }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [details, setDetails]\n    = useState<PostCommentsType>(PostCommentsType.None);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [formIsVisible, setFormIsVisible] = useState(false);\n\n  const { selectedUser, setMainContent } = useContext(UsersContext);\n\n  useEffect(() => {\n    if (!selectedUser) {\n      return;\n    }\n\n    setMainContent(MainContentType.Loader);\n\n    data.getPosts(selectedUser.id)\n      .then(currentPosts => {\n        if (currentPosts.length === 0) {\n          setMainContent(MainContentType.NoPostsYet);\n        } else {\n          setPosts(currentPosts);\n          setMainContent(MainContentType.PostsList);\n        }\n      })\n      .catch(() => setMainContent(MainContentType.PostsLoadingError));\n  }, [selectedUser, setMainContent]);\n\n  const value = useMemo(() => ({\n    posts,\n    setPosts,\n    selectedPost,\n    setSelectedPost,\n    details,\n    setDetails,\n    formIsVisible,\n    setFormIsVisible,\n  }), [posts, selectedPost, details, formIsVisible]);\n\n  return (\n    <PostsContext.Provider value={value}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import React, {\n  useContext, useEffect, useMemo, useState,\n} from 'react';\nimport { Comment } from '../../types/Comment';\nimport { PostsContext } from '../Posts/PostContext';\nimport { PostCommentsType } from '../../types/PostCommentsType';\nimport * as data from '../../api/data';\n\nexport interface CommentsContextType {\n  comments: Comment[],\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  formIsLoading: boolean,\n  setFormIsLoading: React.Dispatch<React.SetStateAction<boolean>>,\n}\n\nexport const CommentsContext = React.createContext<CommentsContextType>({\n  comments: [],\n  setComments: () => {},\n  formIsLoading: false,\n  setFormIsLoading: () => { },\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const CommentsProvider: React.FC<Props> = ({ children }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [formIsLoading, setFormIsLoading] = useState(false);\n\n  const { selectedPost, setDetails } = useContext(PostsContext);\n\n  useEffect(() => {\n    if (!selectedPost) {\n      return;\n    }\n\n    setDetails(PostCommentsType.IsLoading);\n\n    data.getComments(selectedPost.id)\n      .then(currentComments => setComments(currentComments))\n      .catch(() => setDetails(PostCommentsType.CommentsError));\n  }, [selectedPost, setDetails]);\n\n  useEffect(() => {\n    if (comments.length === 0) {\n      setDetails(PostCommentsType.NoCommentsMessage);\n    } else {\n      setDetails(PostCommentsType.CommentsList);\n    }\n  }, [comments, setDetails]);\n\n  const value = useMemo(() => ({\n    comments,\n    setComments,\n    formIsLoading,\n    setFormIsLoading,\n  }), [comments, formIsLoading]);\n\n  return (\n    <CommentsContext.Provider value={value}>\n      {children}\n    </CommentsContext.Provider>\n  );\n};\n","import classNames from 'classnames';\nimport React, {\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nimport { User } from '../../types/User';\nimport { UsersContext } from './UserContext';\nimport { PostsContext } from '../Posts/PostContext';\n\nexport const UserSelector: React.FC = () => {\n  const [activeDropdown, setActiveDropdown] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement | null>(null);\n  const { users, selectedUser, setSelectedUser } = useContext(UsersContext);\n  const { setSelectedPost } = useContext(PostsContext);\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (dropdownRef.current\n      && !dropdownRef.current.contains(event.target as Node)) {\n      setActiveDropdown(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const handleSelectedUser = (item: User) => {\n    setSelectedUser(item);\n    setActiveDropdown(false);\n    setSelectedPost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': activeDropdown })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setActiveDropdown(!activeDropdown)}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n        ref={dropdownRef}\n      >\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': selectedUser?.id === user.id },\n              )}\n              onClick={() => handleSelectedUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-unused-expressions */\nimport React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { PostsContext } from './PostContext';\nimport { Post } from '../../types/Post';\n\nexport const PostsList: React.FC = () => {\n  const {\n    posts,\n    selectedPost,\n    setSelectedPost,\n  } = useContext(PostsContext);\n\n  const selectPost = (item: Post) => {\n    (item.id === selectedPost?.id)\n      ? setSelectedPost(null)\n      : setSelectedPost(item);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">{post.title}</td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': selectedPost !== post },\n                  )}\n                  onClick={() => selectPost(post)}\n                >\n                  {selectedPost === post ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useContext, useState } from 'react';\nimport { addComments } from '../../api/data';\nimport { PostsContext } from '../Posts/PostContext';\nimport { PostCommentsType } from '../../types/PostCommentsType';\nimport { CommentsContext } from './CommentContext';\n\nexport const NewCommentForm: React.FC = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [bodyError, setBodyError] = useState(false);\n\n  const {\n    selectedPost,\n    setDetails,\n    setFormIsVisible,\n  } = useContext(PostsContext);\n\n  const {\n    setComments,\n    setFormIsLoading,\n    formIsLoading,\n  } = useContext(CommentsContext);\n\n  const submitForm = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const currentName = name.trim();\n    const currentEmail = email.trim();\n    const currentBody = body.trim();\n\n    setNameError(!currentName);\n    setEmailError(!currentEmail);\n    setBodyError(!currentBody);\n\n    if (currentName && currentEmail && currentBody && selectedPost) {\n      setFormIsLoading(true);\n      addComments({\n        postId: selectedPost.id,\n        name: currentName,\n        email: currentEmail,\n        body: currentBody,\n      })\n        .then((newComment) => {\n          setBody('');\n          setComments(comments => [...comments, newComment]);\n        })\n        .catch(() => {\n          setDetails(PostCommentsType.CommentsError);\n          setFormIsVisible(false);\n        })\n        .finally(() => setFormIsLoading(false));\n    }\n  };\n\n  const handleClearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n\n    setNameError(false);\n    setEmailError(false);\n    setBodyError(false);\n  };\n\n  const handlChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setNameError(false);\n  };\n\n  const handlChangeEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setEmailError(false);\n  };\n\n  const handlChangeBody = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n    setBodyError(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={submitForm}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': nameError })}\n            value={name}\n            onChange={handlChangeName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': emailError })}\n            value={email}\n            onChange={handlChangeEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': bodyError })}\n            value={body}\n            onChange={handlChangeBody}\n          />\n        </div>\n\n        {bodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': formIsLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => handleClearForm()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { deleteComments } from '../../api/data';\nimport { CommentsContext } from './CommentContext';\n\ntype Props = {\n  item: Comment\n};\n\nexport const CommentItem: React.FC<Props> = ({ item }) => {\n  const { comments, setComments } = useContext(CommentsContext);\n\n  const handleDeleteComment = (id: number) => {\n    setComments(comments.filter(el => el.id !== id));\n    deleteComments(id);\n  };\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href={`mailto:${item.email}`} data-cy=\"CommentAuthor\">\n          {item.name}\n        </a>\n\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => handleDeleteComment(item.id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {item.body}\n      </div>\n    </article>\n  );\n};\n","import React, { useContext } from 'react';\nimport { CommentItem } from './CommentItem';\nimport { CommentsContext } from './CommentContext';\n\nexport const CommentsList: React.FC = () => {\n  const { comments } = useContext(CommentsContext);\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      {comments.map(comment => (\n        <CommentItem item={comment} key={comment.id} />\n      ))}\n    </>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../Comments/NewCommentForm';\nimport { PostsContext } from './PostContext';\nimport { PostCommentsType } from '../../types/PostCommentsType';\nimport { CommentsList } from '../Comments/CommentsList';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    selectedPost,\n    details,\n    setFormIsVisible,\n    formIsVisible,\n  } = useContext(PostsContext);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">{`#${selectedPost?.id}: ${selectedPost?.title}`}</h2>\n\n          <p data-cy=\"PostBody\">{selectedPost?.body}</p>\n        </div>\n\n        <div className=\"block\">\n          {details === PostCommentsType.IsLoading && (\n            <Loader />\n          )}\n\n          {details === PostCommentsType.CommentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {details === PostCommentsType.NoCommentsMessage && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {details === PostCommentsType.CommentsList && (\n            <CommentsList />\n          )}\n\n          {(details === PostCommentsType.CommentsList\n            || details === PostCommentsType.NoCommentsMessage)\n            && !formIsVisible && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setFormIsVisible(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {formIsVisible && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\n\nimport { UsersContext } from './Users/UserContext';\nimport { PostsContext } from './Posts/PostContext';\n\nimport { UserSelector } from './Users/UserSelector';\nimport { Loader } from './Loader';\nimport { PostsList } from './Posts/PostsList';\nimport { PostDetails } from './Posts/PostDetails';\nimport { MainContentType } from '../types/MainContentType';\n\nexport const PostsApp: React.FC = () => {\n  const { selectedPost } = useContext(PostsContext);\n  const { mainContent } = useContext(UsersContext);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {mainContent === MainContentType.NoSelectedUser && (\n                  <p data-cy=\"NoSelectedUser\">No user selected</p>\n                )}\n\n                {mainContent === MainContentType.Loader && (\n                  <Loader />\n                )}\n\n                {mainContent === MainContentType.PostsLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {mainContent === MainContentType.NoPostsYet && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {mainContent === MainContentType.PostsList && (\n                  <PostsList />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { UsersProvider } from './components/Users/UserContext';\nimport { PostsProvider } from './components/Posts/PostContext';\nimport { CommentsProvider } from './components/Comments/CommentContext';\nimport { PostsApp } from './components/PostsApp';\n\nexport const App: React.FC = () => {\n  return (\n    <UsersProvider>\n      <PostsProvider>\n        <CommentsProvider>\n          <PostsApp />\n        </CommentsProvider>\n      </PostsProvider>\n    </UsersProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}