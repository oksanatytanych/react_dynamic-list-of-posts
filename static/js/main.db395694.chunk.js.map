{"version":3,"sources":["utils/fetchClient.ts","types/MainContentType.ts","types/PostCommentsType.ts","components/PostContext.tsx","api/data.ts","components/UserSelector.tsx","components/Loader/Loader.tsx","components/PostsList.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/PostsApp.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","MainContentType","PostCommentsType","client","PostsContext","React","createContext","users","setUsers","mainContent","NoSelectedUser","selectedUser","setSelectedUser","posts","setPosts","selectedPost","setSelectedPost","comments","details","None","PostsProvider","children","useState","setMainContent","setDetails","useEffect","catch","PostsLoadingError","userId","Loader","id","currentPosts","length","NoPostsYet","PostsList","postId","IsLoading","currentComments","NoCommentsMessage","CommentsList","CommentsError","value","useMemo","Provider","UserSelector","activeDropdown","setActiveDropdown","dropdownRef","useRef","useContext","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","className","classNames","type","onClick","role","ref","map","user","href","name","post","title","NewCommentForm","htmlFor","placeholder","PostDetails","PostsApp","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.db395694.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum MainContentType {\n  NoSelectedUser,\n  Loader,\n  PostsLoadingError,\n  NoPostsYet,\n  PostsList,\n}\n","export enum PostCommentsType {\n  None,\n  IsLoading,\n  CommentsError,\n  NoCommentsMessage,\n  CommentsList,\n}\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport * as data from '../api/data';\n\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\n\nimport { MainContentType } from '../types/MainContentType';\nimport { PostCommentsType } from '../types/PostCommentsType';\n\nexport interface PostsContextType {\n  users: User[],\n  setUsers: React.Dispatch<React.SetStateAction<User[]>>,\n  mainContent: MainContentType,\n  selectedUser: User | null,\n  setSelectedUser: (selectedUser: User | null) => void,\n  posts: Post[],\n  setPosts: React.Dispatch<React.SetStateAction<Post[]>>,\n  selectedPost: Post | null,\n  setSelectedPost: (selectedPost: Post | null) => void,\n\n  comments: Comment[],\n  details: PostCommentsType,\n  // newComment: Comment | null,\n  // setNewComment: (message: Comment | null) => void,\n}\n\nexport const PostsContext = React.createContext<PostsContextType>({\n  users: [],\n  setUsers: () => { },\n  mainContent: MainContentType.NoSelectedUser,\n  selectedUser: null,\n  setSelectedUser: () => { },\n\n  posts: [],\n  setPosts: () => { },\n  selectedPost: null,\n  setSelectedPost: () => { },\n\n  comments: [],\n  details: PostCommentsType.None,\n  // newComment: null,\n  // setNewComment: () => { },\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PostsProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments] = useState<Comment[]>([]);\n\n  const [mainContent, setMainContent]\n    = useState<MainContentType>(MainContentType.NoSelectedUser);\n  const [details, setDetails]\n    = useState<PostCommentsType>(PostCommentsType.None);\n\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  // const [newComment, setNewComment] = useState<Comment | null>(null);\n\n  useEffect(() => {\n    data.getUsers()\n      .then(setUsers)\n      .catch(() => setMainContent(MainContentType.PostsLoadingError));\n  }, []);\n\n  useEffect(() => {\n    if (!selectedUser) {\n      return;\n    }\n\n    setMainContent(MainContentType.Loader);\n\n    data.getPosts(selectedUser.id)\n      .then(currentPosts => {\n        if (currentPosts.length === 0) {\n          setMainContent(MainContentType.NoPostsYet);\n        } else {\n          setPosts(currentPosts);\n          setMainContent(MainContentType.PostsList);\n        }\n      })\n      .catch(() => setMainContent(MainContentType.PostsLoadingError));\n  }, [selectedUser]);\n\n  useEffect(() => {\n    if (!selectedPost) {\n      return;\n    }\n\n    setDetails(PostCommentsType.IsLoading);\n\n    data.getComments(selectedPost.id)\n      .then(currentComments => {\n        if (currentComments.length === 0) {\n          setDetails(PostCommentsType.NoCommentsMessage);\n        } else {\n          // console.log(currentComments)\n          // setComments(currentComments);\n          setDetails(PostCommentsType.CommentsList);\n        }\n      })\n      .catch(() => setDetails(PostCommentsType.CommentsError));\n  }, [selectedPost]);\n\n  const value = useMemo(() => ({\n    users,\n    setUsers,\n    mainContent,\n    selectedUser,\n    setSelectedUser,\n    posts,\n    setPosts,\n    selectedPost,\n    setSelectedPost,\n    comments,\n    details,\n  }), [\n    users, posts, mainContent, selectedUser, selectedPost, comments, details]);\n\n  return (\n    <PostsContext.Provider value={value}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import { Comment } from 'postcss';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\n// export const deleteTodos = (todoId: number) => {\n//   return client.delete(`/todos/${todoId}`);\n// };\n\n// export const addTodos = ({ userId, title, completed }: Omit<Todo, 'id'>) => {\n//   return client.post<Todo>('/todos', { userId, title, completed });\n// };\n\n// export const updateTodos = (todo: Todo) => {\n//   return client.patch<Todo>(`/todos/${todo.id}`, todo);\n// };\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/interactive-supports-focus */\nimport classNames from 'classnames';\nimport React, {\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { PostsContext } from './PostContext';\nimport { User } from '../types/User';\n\nexport const UserSelector: React.FC = () => {\n  const [activeDropdown, setActiveDropdown] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement | null>(null);\n  const { users, selectedUser, setSelectedUser } = useContext(PostsContext);\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (dropdownRef.current\n      && !dropdownRef.current.contains(event.target as Node)) {\n      setActiveDropdown(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const handleSelectedUser = (item: User) => {\n    setSelectedUser(item);\n    setActiveDropdown(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': activeDropdown })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setActiveDropdown(!activeDropdown)}\n        >\n          <span>Choose a user</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n        ref={dropdownRef}\n      >\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': selectedUser?.id === user.id },\n              )}\n              onClick={() => handleSelectedUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\nimport { PostsContext } from './PostContext';\n\nexport const PostsList: React.FC = () => {\n  const { posts, selectedPost, setSelectedPost } = useContext(PostsContext);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">{post.title}</td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': selectedPost !== post },\n                  )}\n                  onClick={() => setSelectedPost(post)}\n                >\n                  {selectedPost === post ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const NewCommentForm: React.FC = () => {\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className=\"input is-danger\"\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Name is required\n        </p>\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className=\"input is-danger\"\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Email is required\n        </p>\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className=\"textarea is-danger\"\n          />\n        </div>\n\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Enter some text\n        </p>\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button type=\"submit\" className=\"button is-link is-loading\">\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { PostsContext } from './PostContext';\n\nexport const PostDetails: React.FC = () => {\n  const { selectedPost } = useContext(PostsContext);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">{`#${selectedPost?.id}: ${selectedPost?.title}`}</h2>\n\n          <p data-cy=\"PostBody\">{selectedPost?.body}</p>\n        </div>\n\n        <div className=\"block\">\n          <Loader />\n\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n\n          <p className=\"title is-4\">Comments:</p>\n\n          <article className=\"message is-small\" data-cy=\"Comment\">\n            <div className=\"message-header\">\n              <a href=\"mailto:misha@mate.academy\" data-cy=\"CommentAuthor\">\n                Misha Hrynko\n              </a>\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              Some comment\n            </div>\n          </article>\n\n          <article className=\"message is-small\" data-cy=\"Comment\">\n            <div className=\"message-header\">\n              <a\n                href=\"mailto:misha@mate.academy\"\n                data-cy=\"CommentAuthor\"\n              >\n                Misha Hrynko\n              </a>\n\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n              >\n                delete button\n              </button>\n            </div>\n            <div\n              className=\"message-body\"\n              data-cy=\"CommentBody\"\n            >\n              One more comment\n            </div>\n          </article>\n\n          <article className=\"message is-small\" data-cy=\"Comment\">\n            <div className=\"message-header\">\n              <a\n                href=\"mailto:misha@mate.academy\"\n                data-cy=\"CommentAuthor\"\n              >\n                Misha Hrynko\n              </a>\n\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {'Multi\\nline\\ncomment'}\n            </div>\n          </article>\n\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n          >\n            Write a comment\n          </button>\n        </div>\n\n        <NewCommentForm />\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport classNames from 'classnames';\n\nimport { UserSelector } from './UserSelector';\nimport { Loader } from './Loader';\nimport { PostsList } from './PostsList';\nimport { PostDetails } from './PostDetails';\nimport { PostsContext } from './PostContext';\nimport { MainContentType } from '../types/MainContentType';\n\nexport const PostsApp: React.FC = () => {\n  const { mainContent, selectedPost } = useContext(PostsContext);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {mainContent === MainContentType.NoSelectedUser && (\n                  <p data-cy=\"NoSelectedUser\">No user selected</p>\n                )}\n\n                {mainContent === MainContentType.Loader && (\n                  <Loader />\n                )}\n\n                {mainContent === MainContentType.PostsLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {mainContent === MainContentType.NoPostsYet && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {mainContent === MainContentType.PostsList && (\n                  <PostsList />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost ? <PostDetails /> : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsProvider } from './components/PostContext';\nimport { PostsApp } from './components/PostsApp';\n\nexport const App: React.FC = () => {\n  return (\n    <PostsProvider>\n      <PostsApp />\n    </PostsProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}